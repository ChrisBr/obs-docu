<!DOCTYPE chapter
[
  <!ENTITY % entities SYSTEM "entity-decl.ent">
    %entities;
]>
<chapter version="5.1" xml:id="cha.obs.source_service"
 xmlns="http://docbook.org/ns/docbook"
 xmlns:xi="http://www.w3.org/2001/XInclude"
 xmlns:xlink="http://www.w3.org/1999/xlink" >

 <!-- Helpful, though not overly so: https://en.opensuse.org/openSUSE:Build_Service_Concept_SourceService -->

 <title>Using Source Services</title>

 <remark>toms 2017-09-01: Maybe we should add a list of available
 services from /usr/lib/obs/service/?</remark>

 <!-- FIXME We should also document the various (non-deprecated variants of
 osc service *run*). E.g.: disabledrun [! deprecated in 37990f4]/runall or
 normal run with an extra argument are interesting. - sknorr, 2017-09-13 -->

 <para>
  Source services are scripts that validate, generate, or modify sources in a
  predefined and reliable way. &obsa; and &osccmd; ship with many source
  services included. They can be configured for a single &obsa; package or an
  entire &obsa; project. Each script is designed to offer a single
  functionality. However, source services can be used in powerful
  combinations.
 </para>
 <para>
  For example, a combination of source services could download a Git
  repository, create a source archive from it, and update the version number
  in the build recipe.
 </para>
 <formalpara>
  <title>Running Locally or Remotely:</title>
  <para>
   Source services can run on your machine, in &obsa;, or in both places. On
   the &obsa; server, they can run without user intervention: For example,
   triggered by commits to a source repository. Files generated by a source
   service running on an &obsa; server are clearly marked and cannot be
   modified by users. Services running in default or server-side mode must be
   installed by the administrator of the &obsa; server. Services running
   locally or inside the build environment can be created, added and used by
   everybody.
  </para>
 </formalpara>
 <formalpara>
  <title>Creating Commits Automaticallly:</title>
  <para>
   Source services make automatic commits to an &obsa; package. This means
   that changes made by a user and changes made by source services can never
   be part of the same commit. Source services will only create commits when
   there are source changes and not create empty commits. They will also
   avoid creating merge conflicts.
  </para>
 </formalpara>

 <sect1 xml:id="sec.obs.sserv.create">
  <title>Defining a Source Service</title>
  <para>
   Source services are defined in files called <filename>_service</filename>.
   Such files can be added:
  </para>
  <itemizedlist>
   <listitem>
    <formalpara>
     <title>Per Package:</title>
     <para>
      Automatically update or validate the source of a package.
     </para>
    </formalpara>
    <para>
     To use, add a file named <filename>_service</filename> to the root of
     the &obsa; package.
    </para>
   </listitem>
   <listitem>
    <formalpara>
     <title>Per Project:</title>
     <para>
      To apply project-wide policies which cannot be circumvented by packages
      contained within. Project-wide services are called after per-package
      services.
     </para>
    </formalpara>
    <para>
     To use, add a file named <filename>_service</filename> to the
     root of the &obsa; package <package>_project</package> of your project.
    </para>
    <para>
     The &obsa; package <package>_project</package> exists in every project
     but is invisible in the Web UI. However, using &osccmd;, you can work
     with it as you do with other packages. To check it out, use:
     <command>osc checkout <replaceable>PROJECT_NAME</replaceable> _project</command>.
    </para>
   </listitem>
  </itemizedlist>
  <para>
   The <filename>_service</filename> file is an XML file that contains a list
   of services which are called in the listed order. For each service, you
   can define parameters and a mode.
  </para>
  <screen language="xml">&lt;services&gt; <co xml:id="co.obs.sserv.struct.services"/>
 &lt;service<co xml:id="co.obs.sserv.struct.individual"/> name="<replaceable>MY_SCRIPT</replaceable>"<co xml:id="co.obs.sserv.struct.name"/> mode="<replaceable>MODE</replaceable>"<co xml:id="co.obs.sserv.struct.mode"/>&gt;
  &lt;param name="<replaceable>PARAMETER1</replaceable>"&gt;<replaceable>PARAMETER1_VALUE</replaceable>&lt;/param&gt;<co xml:id="co.obs.sserv.struct.param"/>
 &lt;/service&gt;
&lt;/services&gt;</screen>
  <calloutlist>
   <callout arearefs="co.obs.sserv.struct.services">
    <para>
     Root element of a <filename>_service</filename> file.
    </para>
   </callout>
   <callout arearefs="co.obs.sserv.struct.individual">
    <para>
     <tag>service</tag> elements define individual services. To define
     multiple services running after another, use multiple
     <tag>service</tag> elements, ordered by which service runs after which.
    </para>
    <remark>
     Ugh! Extremely clumsy wording. - sknorr, 2017-09-12
    </remark>
    <para>
     When run locally, this example will execute the script:
    </para>
    <screen><command>/usr/lib/obs/service/<replaceable>MY_SCRIPT</replaceable></command> --<replaceable>PARAMETER1</replaceable> <replaceable>PARAMETER1_VALUE</replaceable> --outdir <replaceable>DIR</replaceable></screen>
   </callout>
   <callout arearefs="co.obs.sserv.struct.name">
    <para>
     Name of the service. When running locally, a script of this name must
     be installed in the directory <filename>/usr/lib/obs/service</filename>.
    </para>
   </callout>
   <callout arearefs="co.obs.sserv.struct.mode">
    <para>
     Mode of the service, see <xref linkend="sec.obs.sserv.mode"/>.
    </para>
   </callout>
   <callout arearefs="co.obs.sserv.struct.param">
    <para>
     Parameters which are passed to the script defined in
     <xref linkend="co.obs.sserv.struct.name"/>.
    </para>
   </callout>
  </calloutlist>

  <example xml:id="ex.obs.sserv.struct">
   <title>A <filename>_service</filename> File</title>
   <para>
    The following shows a realistic and more complex
    <filename>_service</filename> file:
   </para>
   <screen language="xml">&lt;services&gt;
  &lt;service name="download_files" mode="trylocal" /&gt;<co xml:id="co.obs.sserv.real.download"/>
  &lt;service name="verify_file"&gt;<co xml:id="co.obs.sserv.real.verify"/>
    &lt;param name="file"&gt;krabber-1.0.tar.gz&lt;/param&gt;
    &lt;param name="verifier"&gt;sha256&lt;/param&gt;
    &lt;param name="checksum"&gt;7f535a96a834b31ba2201a90c4d365990785dead92be02d4cf846713be938b78&lt;/param&gt;
  &lt;/service&gt;
  &lt;service name="update_source" mode="disabled" /&gt;<co xml:id="co.obs.sserv.real.source"/>
&lt;/services&gt;</screen>
   <para>
    With the example above, the services above are executed in the
    following order:
   </para>
   <calloutlist>
    <callout arearefs="co.obs.sserv.real.download">
     <para>
      Download the file via the <systemitem>download_files</systemitem> service
      using the URL from the Spec file. When using &osccmd;, the downloaded file
      is committed as part of the commit.
     </para>
    </callout>
    <callout arearefs="co.obs.sserv.real.verify">
     <para>
      Compares the downloaded file (<filename>krabber-1.0.tar.gz</filename>)
      against the SHA-256 checksum.
     </para>
    </callout>
    <callout arearefs="co.obs.sserv.real.source">
     <para>
      When <command>osc service disabledrun</command> is run manually, update
      the source archive from an online source. In all other cases, ignore
      this part of the <filename>_service</filename> file.
     </para>
    </callout>
   </calloutlist>
  </example>
 </sect1>

 <sect1 xml:id="sec.obs.sserv.mode">
  <title>Modes of Services</title>
  <para>
   Services can be used in different modes that define when the service runs and
   and how to use the result.
  </para>
<!--
   toms 2017-09-01:
   This is the table for the variablelist below. It's a good idea, but
   this table raises more question than it solves.
   Commenting for the time being. -->
  <table>
   <title>Service Modes</title>
   <tgroup cols="4">
    <colspec colnum="1" colwidth="15%"/>
    <colspec colnum="2" colwidth="20%"/>
    <colspec colnum="3" colwidth="20%"/>
    <colspec colnum="4" colwidth="45%"/>
    <thead>
     <row>
      <entry>Name of Mode</entry>
      <entry>Runs Locally</entry>
      <entry>Runs Remotely</entry>
      <entry>Handling of Added Files</entry>
     </row>
    </thead>
    <tbody>
     <row>
      <entry>Default</entry>
      <entry>Before each build</entry>
      <entry>After each commit</entry>
      <entry>Generated file, prefixed with <filename>_service:</filename></entry>
     </row>
     <row>
      <entry><literal>trylocal</literal></entry>
      <entry>Before each build</entry>
      <entry>After each commit<remark>toms 2017-09-01: True?</remark>
      </entry>
      <entry>Committed as standard files without prefix</entry>
     </row>
     <row>
      <entry><literal>localonly</literal></entry>
      <entry>Before each build</entry>
      <entry>Never</entry>
      <entry>Committed as standard files without prefix</entry>
     </row>
     <row>
      <entry><literal>serveronly</literal></entry>
      <entry>Never</entry>
      <entry>Before each build</entry>
      <entry>Generated file, prefixed with <filename>_service:</filename>
      </entry>
     </row>
     <row>
      <entry><literal>buildtime</literal></entry>
      <entry>As part of the build process
      </entry>
      <entry>As part of the build process</entry>
      <entry></entry>
     </row>
     <row>
      <entry><literal>disabled</literal></entry>
      <entry>Only manually</entry>
      <entry>Never</entry>
      <entry></entry>
     </row>
    </tbody>
   </tgroup>
  </table>
<!--
buildtime
      <footnote xml:id="fn.obs.sserv.mode.buildtime">
       <para>
        A side effect is that the service package is becoming a build
        dependency and must be available.
       </para>
      </footnote>

serveronly:
      <footnote>
       <para>
        Useful when the service is not available or not working
        on developer workstations.
       </para>
      </footnote>

disabledrun
  with osc service runall or osc service disabledrun
-->
<!-- -->
  <variablelist>
   <varlistentry>
    <term>Default Mode</term>
    <listitem>
     <para>
      The default mode of a service is to always run after each commit on
      the server side and locally before every local build.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><literal>trylocal</literal> Mode</term>
    <listitem>
     <para>
      This mode is running the service locally. The result is committed
      as standard files and not named with a <literal>_service:</literal>
      prefix. Additionally, the service runs on the server by
      default. Usually the service should detect that the result is the same
      and skip the generated files. In case they differ, they are generated
      and added on the server.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><literal>localonly</literal> Mode</term>
    <listitem>
     <para>
      This mode is running the service locally. The result gets committed
      as standard files and not named  with <literal>_service:</literal> prefix.
      The service is never running on the server side. It is also not
      possible to trigger it manually.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><literal>serveronly</literal> Mode</term>
    <listitem>
     <remark>toms 2017-09-01: deprecated according to "osc service -h"?</remark>
     <para>
      The serviceonly mode is running the service on the service only. This
      can be useful, when the service is not available or cannot work on
      developer workstations.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><literal>buildtime</literal> Mode</term>
    <listitem>
     <para>
      The service is running inside of the build job, both for local and
      server side builds. A side effect is that the service package is
      becoming a build dependency and must be available. Every user can
      provide and use a service this way in their projects. The generated
      sources are not part of the source repository, but part of the
      generated source packages.
      Note that services requiring external network access are likely to
      fail in this mode, because such access is not available if the build
      workers are running in secure mode<phrase
       os="opensuse;novell"> (as is always the case at <link
        xlink:href="https://build.opensuse.org"/>)</phrase>.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><literal>disabled</literal> Mode</term>
    <listitem>
     <para>
      The disabled mode is neither running the service locally nor on the
      server side. It can be used to temporarily disable the service but keeping
      the definition as part of the service definition. Or it can be used to
      define the way how to generate the sources and doing so by manually calling
      <command>osc service disabledrun</command> The result will
      get committed as standard files again.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </sect1>

 <sect1 xml:id="sec.obs.sserv.validate">
  <title>Defining Services for Validation</title>
  <!-- FIXME before pushing: this section. - sknorr, 2017-09-12 -->
  <para>
   Source Services can be used to validate sources.
  </para>
  <para>
   You can validate sources using either of two methods:
  </para>
  <remark>toms 2017-09-01: by sknorr FIXME: regarding the list:
  however, (based off my interpretation) the use cases seem to be different
  for those two methods: the first guards against corruptions that happen
  on the way between maintainer and you (i.e. rogue ISP). the second guards
  against corruptions between the source project and you (i.e. rogue
  maintainer). Interestingly, neither guards against both.
  </remark>
  <itemizedlist>
   <listitem>
    <para>
     By comparing checksums and metadata of the files in your repository
     with checksums and metadata as recorded by the maintainer.
    </para>
   </listitem>
   <listitem>
    <para>
     Alternatively, you can download the sources from a trusted location
     again and verify that they did not change.
    </para>
   </listitem>
  </itemizedlist>
 </sect1>



 <sect1 xml:id="sec.obs.sserv.remove">
  <title>Removing a Source Service</title>
  <para>
   Sometimes it is useful to continue to work on generated files
   manually. In this situation the <filename>_service</filename> file needs
   to be removed, but all
   generated files need to be committed as standard files. The &obsa;
   provides the <command>mergeservice</command> command for this. It can
   also be used via &osccmd; by calling
    <command>osc service merge</command>.
  </para>
 </sect1>

 <sect1 condition="tbd">
  <title>Interfaces for Using Source Services</title>
  <para><remark>tbd</remark></para>
 </sect1>
</chapter>
